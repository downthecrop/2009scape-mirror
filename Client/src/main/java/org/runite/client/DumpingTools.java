package org.runite.client;

import org.rs09.client.Linkable;
import org.rs09.client.data.HashTable;

import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;

public class DumpingTools {
    public static boolean alreadyRan = false;

    public static final int NUMBER_OF_METHODS = 2065;
    /**
     * Put all code you want to run once for debugging purposes here.
     */
    public static void RunOnceAfterStartup() {
        if (alreadyRan)
            return;
        alreadyRan = true;
        // Uncomment one of these to do it.

        //PrintAllValidGameMethods();
        //GetAllMainMethods("mainmeths.txt");
        //DumpOpcodesToTextFile("method2ops.txt", 2); // Good for analyzing program structure.
        //DumpToRuneStarCompatible("binaryScripts"); // Requires making the folder first. Probably the most useful one.
    }

    public static void DumpOpcodesToTextFile(String outputFile, int methodID) {
        try {
            AssembledMethod a = ItemDefinition.getMethodByID(methodID);
            FileWriter myWriter = new FileWriter(outputFile);
            myWriter.write("Opcodes for Method" + methodID + ":\n");
            for (int opcode : a.assemblyInstructions) {
                myWriter.write(opcode + "\n");
            }
            myWriter.close();
        } catch (IOException e) {
            System.out.println("Cannot write to file " + outputFile);
        }
    }

    /**
     * Dumps all scripts to runestar compatible format.
     */
    public static void DumpToRuneStarCompatible(String outputFolder) {
        for (int i = 0; i < NUMBER_OF_METHODS; i++) {
            try {
                AssembledMethod am = ItemDefinition.getMethodByID(i);
                if (am == null) {
                    continue;
                }
                FileOutputStream fileOut = new FileOutputStream(outputFolder + "/" + i);
                ByteBuffer fileData = ByteBuffer.allocate(65536 * 4);
                fileData.put((byte) 0);
                Short[] ops = new Short[am.assemblyInstructions.length];
                for (int j = 0; j < ops.length; j++) {
                    int s = am.assemblyInstructions[j];
                    fileData.putShort((short) s);
                    if (s == CS2AsmOpcodes.RETURN.getOp() || s == 38 || s == 39 || s >= 100) {
                        fileData.put((byte) am.instructionOperands[j]);
                    } else if (s == CS2AsmOpcodes.PUSH_STR.getOp()) {
                        fileData.put(am.stringInstructionOperands[j].buffer);
                        fileData.put((byte) 0);
                    } else {
                        fileData.putInt(am.instructionOperands[j]);
                    }
                }
                String s = "Generated by 2009scape. https://github.com/2009scape/2009scape";
                fileData.put(s.getBytes());
                fileData.putInt(am.assemblyInstructions.length);
                fileData.putShort((short) am.numberOfIntsToCopy);
                fileData.putShort((short) am.numberOfRSStringsToCopy);
                fileData.putShort((short) am.numberOfIntArguments);
                fileData.putShort((short) am.numberOfStringArguments);
                int offset = fileData.position();
                if (am.switchHashTable != null) {
                    fileData.put((byte) am.switchHashTable.length);
                    for (HashTable sw : am.switchHashTable) {
                        fileData.putShort((short) sw.getBuckets().length);
                        for (Linkable singleSwitch : sw.getBuckets()) {
                            int l1 = (int) (singleSwitch.linkableKey);
                            int l2 = (int) (singleSwitch.linkableKey >> 32);
                            fileData.putInt(l1);
                            fileData.putInt(l2);
                        }
                    }
                }
                int end = fileData.position();
                // Finally, put the offset of the data
                fileData.putShort((short) (end - offset));
                // And write binary file
                fileOut.write(fileData.array(), 0, fileData.position());
            } catch (IOException ioException) {
                System.out.println("Cannot write to file because " + ioException.getMessage());
            }
        }
    }

    /**
     * All script methods called by the runAssembledMethod function are "main" methods. that is, they
     * do not get called by other methods. The following function generates
     * a list of main methods.
     *
     * So a method is either a "main" method or a "helper" method, and "helper" methods are never called
     * To generate the list of main methods the following function can be used
     */

    // Here is the generated list:
    public static final int[] MAIN_METHODS = {};

    // A main method is defined as a method that is not called by any other methods, including recursively
    public static ArrayList<ArrayList<Integer>> AllMethodsCalled = new ArrayList<>();

    public static void GetAllMainMethods(String outputFile) {
        // Build out all method calls
        for (int i = 0; i < NUMBER_OF_METHODS; i++) {
            AssembledMethod a = ItemDefinition.getMethodByID(i);
            if (a == null) {
                continue;
            }
            ArrayList<Integer> ai = new ArrayList<>();
            for (int j = 0; j < a.assemblyInstructions.length; j++) {
                if (a.assemblyInstructions[j] == CS2AsmOpcodes.CALL.getOp() && !ai.contains((Object) a.instructionOperands[j])) {
                    ai.add(a.instructionOperands[j]);
                }
            }
            AllMethodsCalled.add(ai);
        }

        try {
            FileWriter myWriter = new FileWriter(outputFile);
            myWriter.write("Main methods:\n");
            String methos = "";
            for (int i = 0; i < NUMBER_OF_METHODS; i++) {
                boolean isMain = true;
                end:
                for (ArrayList<Integer> j : AllMethodsCalled) {
                    for (Integer k : j) {
                        if (i == k) {
                            isMain = false;
                            break end;
                        }
                    }
                }
                if (isMain) {
                    methos = methos + ", " + i;
                    myWriter.write("Method" + i + "\n");
                }
            }
            myWriter.write("\n\n" + methos);
            myWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    /**
     * Dumps the method arguments to a file for all methods, as well as a graph of their method calls and on what
     * lines those calls occur.
     */

    public static void DumpAllGameMethodArguments(String outputFile) {
        try {
            FileWriter myWriter = new FileWriter(outputFile);
            myWriter.write("; Game method metadata\n;\n");
            for (int l = 0; l < Integer.MAX_VALUE; l++) {
                AssembledMethod a = ItemDefinition.getMethodByID(l);
                if (a == null) {
                    myWriter.close();
                    break;
                } else {
                    myWriter.write(";Method" + l + " (");
                    int i = 0;
                    for (int j = 0; j < a.numberOfIntArguments; j++) {
                        i++;
                        myWriter.write("int var" + i);
                        if (j < a.numberOfIntArguments - 1 || a.numberOfStringArguments != 0) {
                            myWriter.write(", ");
                        }
                    }
                    for (int j = 0; j < a.numberOfStringArguments; j++) {
                        i++;
                        myWriter.write("string var" + i);
                        if (j < a.numberOfStringArguments - 1) {
                            myWriter.write(", ");
                        }
                    }
                    myWriter.write(")\n");
                    GetMethodDependencyGraph(myWriter, l);
                }
            }
        } catch (IOException e) {
            System.out.println("An error occurred writing the file: " + outputFile);
            e.printStackTrace();
        }
    }

    /**
     * Records for each method, all the methods that it calls, recursively. Used internally by other functions.
     */
    private static int treeDepth = 0;
    private static ArrayList<Integer> tree = new ArrayList<>();

    private static void GetMethodDependencyGraph(FileWriter f, int methodID) throws IOException {
        AssembledMethod am = ItemDefinition.getMethodByID(methodID);
        for (int i = 0; i < treeDepth; i++) {
            f.write('\t');
        }
        f.write("Method" + methodID + "\n");
        if (am == null) {
            f.write(" Null??");
            return;
        }
        treeDepth++;
        tree.add(methodID);
        for (int i = 0; i < am.assemblyInstructions.length; i++) {
            if (am.assemblyInstructions[i] == CS2AsmOpcodes.CALL.getOp()) {
                f.write(i + ":");
                if (tree.contains(am.instructionOperands[i])) {
                    treeDepth++;
                    for (int j = 0; j < treeDepth; j++) {
                        f.write('\t');
                    }
                    f.write("RECURSIVE Method" + methodID);
                    treeDepth--;
                } else {
                    GetMethodDependencyGraph(f, am.instructionOperands[i]);
                }
            }
        }
        tree.remove(tree.size() - 1);
        treeDepth--;
    }

    public static void PrintAllValidGameMethods() {
        for (int l = -5000; l < 5000; l++) {
            AssembledMethod a = ItemDefinition.getMethodByID(l);
            if (a == null) {
                continue;
            }
            System.out.println("Valid methodID: " + l);
        }
    }
}
